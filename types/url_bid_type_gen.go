package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	"sort"

	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash marshals for hash
func (z *UrlBidHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 10
	o = append(o, 0x8a)
	o = hsp.AppendInt64(o, z.AffectedRows)
	o = hsp.AppendInt64(o, z.LastInsertID)
	o = hsp.AppendUint64(o, z.LogOffset)
	if oTemp, err := z.NodeID.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.PayloadHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.RequestHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.ResponseAccount.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendUint64(o, z.RowCount)
	if oTemp, err := z.Target.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendTime(o, z.Timestamp)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UrlBidHeader) Msgsize() (s int) {
	s = 1 + 13 + hsp.Int64Size + 13 + hsp.Int64Size + 10 + hsp.Uint64Size + 7 + z.NodeID.Msgsize() + 12 + z.PayloadHash.Msgsize() + 12 + z.RequestHash.Msgsize() + 16 + z.ResponseAccount.Msgsize() + 9 + hsp.Uint64Size + 7 + z.Target.Msgsize() + 10 + hsp.TimeSize
	return
}

// MarshalHash marshals for hash
func (z *UrlBidMessage) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 2
	// map header, size 2
	o = append(o, 0x82, 0x82)
	if oTemp, err := z.Header.UrlBidHeader.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.Header.UrlBidHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	// map header, size 1
	o = append(o, 0x81)
	o = hsp.AppendMapHeader(o, uint32(len(z.Payload.Cids)))
	za0001Slice := make([]string, 0, len(z.Payload.Cids))
	for i := range z.Payload.Cids {
		za0001Slice = append(za0001Slice, i)
	}
	sort.Strings(za0001Slice)
	for _, za0001 := range za0001Slice {
		za0002 := z.Payload.Cids[za0001]
		o = hsp.AppendString(o, za0001)
		o = hsp.AppendString(o, za0002)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UrlBidMessage) Msgsize() (s int) {
	s = 1 + 7 + 1 + 13 + z.Header.UrlBidHeader.Msgsize() + 11 + z.Header.UrlBidHash.Msgsize() + 8 + 1 + 5 + hsp.MapHeaderSize
	if z.Payload.Cids != nil {
		for za0001, za0002 := range z.Payload.Cids {
			_ = za0002
			s += hsp.StringPrefixSize + len(za0001) + hsp.StringPrefixSize + len(za0002)
		}
	}
	return
}

// MarshalHash marshals for hash
func (z *UrlBidPayload) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 1
	o = append(o, 0x81)
	o = hsp.AppendMapHeader(o, uint32(len(z.Cids)))
	za0001Slice := make([]string, 0, len(z.Cids))
	for i := range z.Cids {
		za0001Slice = append(za0001Slice, i)
	}
	sort.Strings(za0001Slice)
	for _, za0001 := range za0001Slice {
		za0002 := z.Cids[za0001]
		o = hsp.AppendString(o, za0001)
		o = hsp.AppendString(o, za0002)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UrlBidPayload) Msgsize() (s int) {
	s = 1 + 5 + hsp.MapHeaderSize
	if z.Cids != nil {
		for za0001, za0002 := range z.Cids {
			_ = za0002
			s += hsp.StringPrefixSize + len(za0001) + hsp.StringPrefixSize + len(za0002)
		}
	}
	return
}

// MarshalHash marshals for hash
func (z *UrlBidSignedHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 2
	o = append(o, 0x82)
	if oTemp, err := z.UrlBidHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.UrlBidHeader.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UrlBidSignedHeader) Msgsize() (s int) {
	s = 1 + 11 + z.UrlBidHash.Msgsize() + 13 + z.UrlBidHeader.Msgsize()
	return
}
